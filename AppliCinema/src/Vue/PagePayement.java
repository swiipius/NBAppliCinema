/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vue;

import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.io.*;
import java.text.ParseException;
import javax.swing.*;
import jdbc2020.Connexion;
import java.util.*;
import java.text.SimpleDateFormat;


/**
 *
 * @author pierr
 */
public class PagePayement extends javax.swing.JFrame {

    private final boolean connexionValid;
    private boolean Emp;
    int nbVenduSernior, nbVenduMembre, nbVenduEnfant, nbVenduPasCo, id_film, id_client, id_seance;
    Connexion connect;
    boolean PayOK = false;
    private String sdate;

    /**
     * Creates new form PagePayement
     *
     * @param connexionValid
     */
    public PagePayement(boolean connexionValid, int nbMembre, int nbSenior, int nbEnfant, int nbPasCo, int film, int seance, int client) {
        super("Page De Payement");
        initComponents();
        this.connexionValid = connexionValid;
        this.Emp = Emp;
        nbVenduSernior = nbSenior;
        nbVenduMembre = nbMembre;
        nbVenduEnfant = nbEnfant;
        nbVenduPasCo = nbPasCo;
        id_film = film;
        id_client = client;
        id_seance = seance;
    }

    private Date toDate(String sdate) throws ParseException {
        Date date = new SimpleDateFormat("/MM/yyyy").parse(sdate);
        return date;
    }

    private int countCrypto = 0;
    private int countNum = 0;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnValid = new javax.swing.JButton();
        NumCarte = new javax.swing.JTextField();
        Crypto = new javax.swing.JTextField();
        Nom = new javax.swing.JTextField();
        Date = new javax.swing.JFormattedTextField();
        DateExp = new javax.swing.JLabel();
        ImageFond = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBounds(new java.awt.Rectangle(600, 300, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(800, 400));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        btnValid.setBackground(new java.awt.Color(204, 204, 204));
        btnValid.setForeground(new java.awt.Color(0, 0, 0));
        btnValid.setText("Valider");
        btnValid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValidActionPerformed(evt);
            }
        });
        getContentPane().add(btnValid);
        btnValid.setBounds(360, 290, 80, 40);

        NumCarte.setBackground(new java.awt.Color(204, 204, 204));
        NumCarte.setForeground(new java.awt.Color(0, 0, 0));
        NumCarte.setText("Numero de la carte");
        NumCarte.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                NumCarteMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                NumCarteMouseExited(evt);
            }
        });
        NumCarte.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                NumCarteKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NumCarteKeyTyped(evt);
            }
        });
        getContentPane().add(NumCarte);
        NumCarte.setBounds(270, 140, 260, 40);

        Crypto.setBackground(new java.awt.Color(204, 204, 204));
        Crypto.setForeground(new java.awt.Color(0, 0, 0));
        Crypto.setText("Cryptogramme");
        Crypto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CryptoMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                CryptoMouseExited(evt);
            }
        });
        Crypto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CryptoKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CryptoKeyTyped(evt);
            }
        });
        getContentPane().add(Crypto);
        Crypto.setBounds(440, 200, 90, 40);

        Nom.setBackground(new java.awt.Color(204, 204, 204));
        Nom.setForeground(new java.awt.Color(0, 0, 0));
        Nom.setText("Nom sur la  carte");
        Nom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                NomMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                NomMouseExited(evt);
            }
        });
        Nom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NomActionPerformed(evt);
            }
        });
        getContentPane().add(Nom);
        Nom.setBounds(270, 90, 260, 40);

        Date.setBackground(new java.awt.Color(204, 204, 204));
        Date.setForeground(new java.awt.Color(0, 0, 0));
        try {
            Date.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("## / ##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        Date.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Date.setToolTipText("");
        getContentPane().add(Date);
        Date.setBounds(270, 210, 60, 30);

        DateExp.setBackground(new java.awt.Color(0, 0, 0));
        DateExp.setForeground(new java.awt.Color(0, 0, 0));
        DateExp.setText("Date d'expiration");
        getContentPane().add(DateExp);
        DateExp.setBounds(270, 190, 80, 15);

        ImageFond.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Background/PagePayement.png"))); // NOI18N
        getContentPane().add(ImageFond);
        ImageFond.setBounds(0, 0, 850, 480);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NomMouseClicked
        Nom.setText(null);
    }//GEN-LAST:event_NomMouseClicked

    private void NomMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NomMouseExited
        if (Nom.getText().equals("")) {
            Nom.setText("Nom sur la carte");
        }
    }//GEN-LAST:event_NomMouseExited

    private void NumCarteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NumCarteMouseClicked
        NumCarte.setText(null);
    }//GEN-LAST:event_NumCarteMouseClicked

    private void NumCarteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NumCarteMouseExited
        if (NumCarte.getText().equals("")) {
            NumCarte.setText("Num√©ro de la carte");
        }    }//GEN-LAST:event_NumCarteMouseExited

    private void CryptoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CryptoMouseClicked
        Crypto.setText(null);
    }//GEN-LAST:event_CryptoMouseClicked

    private void CryptoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CryptoMouseExited
        if (Crypto.getText().equals("")) {
            Crypto.setText("Cryptogramme");
        }    }//GEN-LAST:event_CryptoMouseExited

    private void CryptoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CryptoKeyTyped
        char c = evt.getKeyChar();
        if (countCrypto <= 3) {
            if (!Character.isDigit(c)) {
                evt.consume();
            }
        } else {
            evt.consume();
        }
    }//GEN-LAST:event_CryptoKeyTyped

    private void CryptoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CryptoKeyPressed
        char c = evt.getKeyChar();
        if ((evt.getKeyCode() == 8) && (countCrypto < 4)) {
            countCrypto--;
        } else if ((evt.getKeyCode() == 8) && (countCrypto == 4)) {
            countCrypto -= 2;
        } else if ((Character.isDigit(c)) && (4 > countCrypto)) {
            countCrypto++;
        }
    }//GEN-LAST:event_CryptoKeyPressed

    private void NumCarteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NumCarteKeyPressed
        char c = evt.getKeyChar();
        if ((evt.getKeyCode() == 8) && (countNum < 17)) {
            countNum--;
        } else if ((evt.getKeyCode() == 8) && (countNum == 17)) {
            countNum -= 2;
        } else if ((Character.isDigit(c)) && (17 > countNum)) {
            countNum++;
        }
    }//GEN-LAST:event_NumCarteKeyPressed

    private void NumCarteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NumCarteKeyTyped
        char c = evt.getKeyChar();
        if (countNum <= 16) {
            if (!Character.isDigit(c)) {
                evt.consume();
            }
        } else {
            evt.consume();
        }
    }//GEN-LAST:event_NumCarteKeyTyped

    private void btnValidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValidActionPerformed
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM / yy");
        LocalDateTime now = LocalDateTime.now();
        //System.out.println(dtf.format(now).compareTo(Date.getText()));
        //Verification que toutes les infos ont √©t√© rentr√©

        if ((NumCarte.getText().equals("Numero de la carte")) || (Nom.getText().equals("Nom sur la  carte")) || (Crypto.getText().equals("Cryptogramme")) || (Date.getText().equals("   /   "))) {
            JOptionPane.showMessageDialog(null, "Veuillez remplir tous les champs");
        } //Verification de la taille
        else if (NumCarte.getText().length() < 16) {
            JOptionPane.showMessageDialog(null, "Veuillez remplir tous les champs");
            NumCarte.setText(null);
            countNum = 0;
        } else if (Crypto.getText().length() < 3) {
            JOptionPane.showMessageDialog(null, "Veuillez remplir tous les champs");
            Crypto.setText(null);
            countCrypto = 0;
        } //verication de la validit√©
        else {
            try {
                if (!testDate(Date.getText())) {
                    JOptionPane.showMessageDialog(null, "Carte p√©rim√©e");
                    Date.setText(null);
                } else {
                    JOptionPane.showMessageDialog(null, "Paiement Valid√©");
                    this.dispose();
                    try {
                        PayOK = true;
                        if (!connexionValid) {
                            String Seance[];
                            String Film;
                            Seance = getSeance(id_seance);
                            Film = getFilm(id_film);
                            String billet = "R√©sum√© Achat :\nNombre de place : " + nbVenduPasCo + "\nPrix total : " + 12 * nbVenduPasCo + "\nFilm : " + Film + "\nSeance du " + Seance[0] + " a " + Seance[1] + " en salle " + Seance[2];
                            String Nom = JOptionPane.showInputDialog(null, "Veuillez entrer le nom de la personne √† qui appartient ce billet");
                            File fBillet = new File("C:\\Users\\pierr\\Documents\\Billet"+ Nom +".txt");

                            if (!fBillet.exists()) {
                                try {
                                    fBillet.createNewFile();
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }
                            }

                            try (PrintWriter print = new PrintWriter(new FileOutputStream(fBillet))) {
                                print.print(billet);
                            } catch (FileNotFoundException ex) {
                                Logger.getLogger(PagePayement.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            JOptionPane.showMessageDialog(null, "Votre billet a √©t√© imprim√©");
                        }
                        else{
                            gestionBDD(nbVenduSernior, nbVenduMembre, nbVenduEnfant, nbVenduPasCo, id_client, id_film, id_seance);
                        }
                        PageAccueil p = new PageAccueil(connexionValid, Emp);
                        p.setVisible(true);
                        
                    } catch (SQLException ex) {
                        Logger.getLogger(PagePayement.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(PagePayement.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } catch (ParseException ex) {
                Logger.getLogger(PagePayement.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnValidActionPerformed

    private void NomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NomActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed

    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        System.out.println(PayOK);
        if (!PayOK) {
            int result = JOptionPane.showConfirmDialog(null, "Voulez vous abandonner le payement ?", "Suppression", JOptionPane.YES_NO_OPTION);

            if (result == JOptionPane.YES_OPTION) {
                this.dispose();
                try {
                    PageSelecPrix psp = new PageSelecPrix(connexionValid, id_film, id_client, id_seance);
                    psp.setVisible(true);
                } catch (SQLException | ClassNotFoundException ex) {
                    Logger.getLogger(PagePayement.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                PagePayement pp = new PagePayement(connexionValid, nbVenduMembre, nbVenduSernior, nbVenduEnfant, nbVenduPasCo, id_film, id_seance, id_client);
                pp.setVisible(true);
            }
        }
        /*else{
            try {
                PageAccueil pa = new PageAccueil(connexionValid, Emp);
                pa.setVisible(true);
            } catch (SQLException | ClassNotFoundException ex) {
                Logger.getLogger(PagePayement.class.getName()).log(Level.SEVERE, null, ex);
            }
        }*/
    }//GEN-LAST:event_formWindowClosing

    public void gestionBDD(int nbVenduSenior, int nbVenduMembre, int nbVenduEnfant, int nbVenduPasCo, int id_film, int id_client, int id_seance) throws SQLException, ClassNotFoundException {
        connect = new Connexion("cinema", "root", "");
        String requeteAjout;
        while (nbVenduSenior != 0) {
            requeteAjout = "INSERT INTO billet(facture,ID_Client,ID_film,ID_Seance,TypePlace) VALUES(" + 8 + "," + id_client + "," + id_film + "," + id_seance + ",'Senior');";
            connect.executeUpdate(requeteAjout);
            nbVenduSenior --;
        }
        while (nbVenduMembre != 0) {
            requeteAjout = "INSERT INTO billet(facture,ID_Client,ID_film,ID_Seance,TypePlace) VALUES(" + 10 + "," + id_client + "," + id_film + "," + id_seance + ",'Membre');";
            connect.executeUpdate(requeteAjout);
            nbVenduMembre --;
        }
        while (nbVenduEnfant != 0) {
            requeteAjout = "INSERT INTO billet(facture,ID_Client,ID_film,ID_Seance,TypePlace) VALUES(" + 6 + "," + id_client + "," + id_film + "," + id_seance + ",'Enfant');";
            connect.executeUpdate(requeteAjout);
            nbVenduEnfant --;
        }
    }

    public String[] getSeance(int id_seance) throws SQLException, ClassNotFoundException {
        connect = new Connexion("cinema", "root", "");
        String strSeance[] = {"", "", ""};
        String requete = "SELECT date, heureDebut, salle FROM seance WHERE id_seance = " + id_seance + ";";
        DefaultListModel<String> Seance = new DefaultListModel<>();
        Seance = connect.requestDemande(requete);
        for (int i = 0; i < 3; i++) {
            strSeance[i] = Seance.get(i);
        }
        return strSeance;
    }

    public String getFilm(int id_film) throws ClassNotFoundException, SQLException {
        connect = new Connexion("cinema", "root", "");
        String strFilm = "";
        String requete = "SELECT titre FROM film WHERE id_film = " + id_film + ";";
        DefaultListModel<String> Film = new DefaultListModel<>();
        Film = connect.requestDemande(requete);
        strFilm = Film.get(0);
        return strFilm;
    }

    public boolean testDate(String sDate) throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat("MM / yy");
        boolean verif = false;
        Date dCarte = new Date();
        Date dAuj = new Date();
        dAuj = sdf.parse(sdf.format(new Date()));
        dCarte = sdf.parse(sDate);

        int result;
        result = dCarte.compareTo(dAuj);

        if (result < 0) {
            return verif;
        } else {
            return !verif;
        }
    }
    
    public void email(String adresse){
        String to = adresse;
        String From = "swiip.hebus@gmail.com";
        String host = "localhost";
        Properties properties = System.getProperties();
        
        
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Crypto;
    private javax.swing.JFormattedTextField Date;
    private javax.swing.JLabel DateExp;
    private javax.swing.JLabel ImageFond;
    private javax.swing.JTextField Nom;
    private javax.swing.JTextField NumCarte;
    private javax.swing.JButton btnValid;
    // End of variables declaration//GEN-END:variables
}
